(1)  What is JavaScript?
ans:- JavaScript is a dynamic computer programming language. It is lightweight and most commonly used as a part of web pages, whose implementations allow client-side script to interact with the user and make dynamic pages. It is an interpreted programming language with object-oriented capabilities.

JavaScript was first known as LiveScript, but Netscape changed its name to JavaScript, possibly because of the excitement being generated by Java. JavaScript made its first appearance in Netscape 2.0 in 1995 with the name LiveScript. The general-purpose core of the language has been embedded in Netscape, Internet Explorer, and other web browsers.

The ECMA-262 Specification defined a standard version of the core JavaScript language.

JavaScript is a lightweight, interpreted programming language.
Designed for creating network-centric applications.
Complementary to and integrated with Java.
Complementary to and integrated with HTML.
Open and cross-platform.







(2)  What is the use of isNaN function?
ans:- The JavaScript isNaN() Function is used to check whether a given value is an illegal number or not. It returns true if the value is a NaN else returns false. It is different from the Number.isNaN() Method.

Syntax:

isNaN( value )
Parameter Values: This method accepts a single parameter as mentioned above and described below: 






(3)  What is negative Infinity? 
ans:- Number.NEGATIVE_INFINITY is a special numeric value that is returned when an arithmetic operation or mathematical function generates a negative value greater than the largest representable number in JavaScript (i.e., more negative than -Number.MAX_VALUE).

JavaScript displays the NEGATIVE_INFINITY value as -Infinity. This value behaves mathematically like infinity; for example, anything multiplied by infinity is infinity, and anything divided by infinity is zero. In ECMAScript v1 and later, you can also use -Infinity instead of Number.NEGATIVE_INFINITY.










(4)  Which company developed JavaScript?
ans:- JavaScript was created at Netscape Communications by Brendan Eich in 1995. Netscape and Eich designed JavaScript as a scripting language for use with the company's flagship web browser, Netscape Navigator. Initially known as LiveScript, Netscape changed the name to JavaScript so they could position it as a companion for the Java language, a product of their partner, Sun Microsystems. Apart from some superficial syntactic similarities, though, JavaScript is in no way related to the Java programming language.

After its release, more and more browsers started adding JavaScript support. Still, for much of its history JavaScript was not regarded as a serious programming language. Its earliest releases suffered from notable performance and security issues, but developers had no alternatives. If they wanted to run programs in the browser, they had to use JavaScript.

In 2008, the creation of Google's open-source Chrome V8, a high-performance JavaScript engine, provided a crucial turning point for JavaScript. The subsequent proliferation of fast JavaScript engines made it possible for developers to build sophisticated browser-based applications with performance that competed with desktop and mobile applications.

Soon after, Ryan Dahl released an open-source, cross-platform environment called Node.js. It provided a way to run JavaScript code from outside a browser. It freed JavaScript from the browser's confines and led directly to JavaScript's current popularity. Today, you can use JavaScript to write all kinds of applications, including browser, server, mobile, and desktop applications. Most major online companies today, including Facebook, Twitter, Netflix, and Google, all use JavaScript in their products.











(5)  What are undeclared and undefined variables? 
ans:- Undefined: It occurs when a variable has been declared but has not been assigned any value. Undefined is not a keyword. 

Undeclared: It occurs when we try to access any variable that is not initialized or declared earlier using the var or const keyword. If we use ‘typeof’ operator to get the value of an undeclared variable, we will face the runtime error with the return value as “undefined”. The scope of the undeclared variables is always global.

Undeclared and undefined variables in Javascript?
Technology September 30, 2022
Undeclared and undefined variables in Javascript?
 

An undefined variable is one that has been declared but does not have a value. An undeclared variable is one that does not exist in the programmer at all.

What is undeclared variable in JavaScript?

Undeclared is a variable that has not been properly declared using var or let.

How to declare a variable in JavaScript?

Declare a variable with var, let keywords only if you try to declare variable with const keyword JavaScript throws an error like

clare a 


Ad by Amazon Web Services (AWS)
Build & train machine learning models fast. Get started for free.
AWS removes the complexity of building, training, and deploying machine learning models at any scale. 


















(6)  Write the code for adding new elements dynamically?
ans:- Javascript is a very important language when it comes to learning how the browser works. Often there are times we would like to add dynamic elements/content to our web pages. This post deals with all of that.

Creation of new element: New elements can be created in JS by using the createElement() method.  

Syntax:

document.createElement("<tagName>");  
// Where <tagName> can be any HTML 
// tagName like div, ul, button, etc.

// newDiv element has been created
For Eg: let newDiv = document.createElement("div");
Once the element has been created, let’s move on to the setting of attributes of the newly created element.






(7)  What is the difference between ViewState and SessionState?
ans:- ViewState	SessionState
The view state is maintain in page level	The session state is maintain in session level
Scope of a view state is specific to a page only	Scope of a session state is for a user session
The ViewState is used to store data that can be used during postbacks for page level	The SessionState is used to store data that can be used anywhere within website or web application in asp.net
The view state is a client side state management technique to store data	The session state is a server side state management technique to store data
The ViewState of one page is not visible in another page which means when user requests another page, the previous page stored data will be no longer available to use	The SessionState value is available in all pages within a user session which means the data will no longer available if user close the browser or session timeout occurs (usually 20min which is default for session)
The ViewState has no specific expiration date or time to wipeout stored data	The SessionState will clear session when the current user close his web browser or session dies due to inactivity of the user within set timeout (default is 20min)
When to Use SessionState and ViewState?
If you want to access the stored data over website or web application, you should definitely go with session state, whereas if you want to access the stored data for a specific page only (which means persists during postbacks), go with view state.






(8) What is === operator?
ans:- JavaScript is widely used to create interactive web pages. It has many frameworks such as React JS, Angular JS, Node JS, etc. Like any other programming language, JavaScript also provides operators like arithmetic, relational, comparison operators, etc. The equality operator, i.e., "==" is one such comparison operator that checks whether the LHS is equal to RHS or not. This operator is present in all other programming languages but it is somewhat different in JavaScript. This is due to the fact that JavaScript is a loosely typed language, whereas all other languages are strictly typed. As JS is loosely typed, it doesn’t compare the type of two variables given. This can be explained by the concept of coercion.

Coercion in JavaScript
Let us consider that we need to add two variables "x" and "y" having the values 2 and 3 respectively. We will get 5 as output. But what if we add "x" with a string? Let’s assume that we are adding the variable "x" with an empty string " ".

In order to perform an operation, both values should be of same type. So, when we run that, JavaScript considers both the values as strings and concatenate them. This consideration depends on the type of operator being used.

If we perform subtraction on two numbers in which one is of string type, then it doesn’t concatenate them. It subtracts one from the other. So, we can say that JavaScript implicitly converts the type of data based on the operations being performed. This is known as coercion.

Now, let’s apply this concept to the double equals (==) operator. Consider two variables "x" and "y", both having 3 as their value, but "3" in "x" variable is of string type.

x = "3"
y = 3
Suppose we compare "x" and "y", i.e., "x == y". Since one is of string type and another is of number type, we expect false as the output as in all other programming languages. But in JavaScript, we get "True".

This is because double equals (==) in JavaScript doesn’t consider the type and uses the concept of coercion to convert one of the datatypes to the other and then performs the operation. But it is not always advisable to implicitly convert a datatype.

In order to overcome this problem, we use triple equals (===) instead of double equals. The triple equals operator is strictly typed and it considers the datatype of both the variables in order to compare them.

If we use triple equals to compare whether "x === y", then we’ll get the result as "False". It is recommended to always use the triple equals operator as it gives the correct output.

Now let's take a couple of examples to understand the concept better −

Example 1
If we compare two same strings, then both double and triple equals give true as output.

str1 = "example"
str2 = "example"
str1 == str2   	// True
str1 === str2   	// True 
Example 2
If we compare a string with a number, both double and triple equals give false.

str1 = "example"
str2 = 3 
str1 == str2   	// False
str1 === str2   	// False
Example 3
If we compare two same numbers in which one of them is of string type, then double equals (==) gives true, while triple equals (===) gives false.

str1 = "7"
str2 = 7
str1 == str2   // True
str1 === str2   // False
Example 4
Let’s take two variables var1 and var2 of which the former stores "8" as a string and the latter one has a value of 7. If we subtract these two variables and compare it whether it is equal to 1, both double and triple equals give True as output. When we perform subtraction, the string value is implicitly converted into a number type by the JavaScript. Hence, the type of the resultant becomes number and both gives the output as True.

var1 = "8"
var2 = 7
y = var1 – var2
y==1   	// True
y === 1   	// True








(9)  How can the style/class of an element be changed?
ans:- <!DOCTYPE html>
<html>
<body>

<h2>JavaScript HTML DOM</h2>
<p>Changing the HTML style:</p>


<p id="p1">Hello World!</p>
<p id="p2">Hello World!</p>

<script>
document.getElementById("p2").style.color = "blue";
document.getElementById("p2").style.fontFamily = "Arial";
document.getElementById("p2").style.fontSize = "larger";
</script>


</body>
</html>














(10)  How to read and write a file using JavaScript?
ansd:- The function fopen() takes two parameters – 1. Path and 2. Mode (0 for reading and 3 for writing). The fopen() function returns -1, if the file is successfully opened.

Example:
file=fopen(getScriptPath(),0);
The function fread() is used for reading the file content.

Example:
str = fread(file,flength(file) ;
The function fwrite() is used to write the contents to the file.

Example:
file = fopen("c:\MyFile.txt", 3);// opens the file for writing
fwrite(file, str);// str is the content that is to be written into the file.
How to read and write a file using javascript?
There are two ways to do it:

1. Using JavaScript extensions (runs from JavaScript Editor), or

2. Using a web page and ActiveX objects (Internet Explorer only)

In JavaScript Extensions, you can use
fh = fopen(getScriptPath(), 0); to open a file

Using ActiveX objects, following should be included in your code to read a file:
var fso = new ActiveXObject("Scripting.FileSystemObject");
var s = fso.OpenTextFile("C:\\example.txt", 1, true);














(11)  What are all the looping structures in JavaScript? 
ans:- Loops are used to execute the same block of code again and again, as long as a certain condition is met. The basic idea behind a loop is to automate the repetitive tasks within a program to save the time and effort. JavaScript now supports five different types of loops:

while — loops through a block of code as long as the condition specified evaluates to true.
do…while — loops through a block of code once; then the condition is evaluated. If the condition is true, the statement is repeated as long as the specified condition is true.
for — loops through a block of code until the counter reaches a specified number.
for…in — loops through the properties of an object.
for…of — loops over iterable objects such as arrays, strings, etc.
In the following sections, we will discuss each of these loop statements in detail.

The while Loop
This is the simplest looping statement provided by JavaScript.

The while loop loops through a block of code as long as the specified condition evaluates to true. As soon as the condition fails, the loop is stopped. The generic syntax of the while loop is:

while(condition) {
    // Code to be executed
}
The following example defines a loop that will continue to run as long as the variable i is less than or equal to 5. The variable i will increase by 1 each time the loop runs:

ExampleTry this code »
var i = 1;
while(i <= 5) {    
    document.write("<p>The number is " + i + "</p>");
    i++;
}
Note: Make sure that the condition specified in your loop eventually goes false. Otherwise, the loop will never stop iterating which is known as infinite loop. A common mistake is to forget to increment the counter variable (variable i in our case).

The do...while Loop
The do-while loop is a variant of the while loop, which evaluates the condition at the end of each loop iteration. With a do-while loop the block of code executed once, and then the condition is evaluated, if the condition is true, the statement is repeated as long as the specified condition evaluated to is true. The generic syntax of the do-while loop is:

do {
    // Code to be executed
}
while(condition);
The JavaScript code in the following example defines a loop that starts with i=1. It will then print the output and increase the value of variable i by 1. After that the condition is evaluated, and the loop will continue to run as long as the variable i is less than, or equal to 5.

ExampleTry this code »
var i = 1;
do {
    document.write("<p>The number is " + i + "</p>");
    i++;
}
while(i <= 5);
Difference Between while and do...while Loop
The while loop differs from the do-while loop in one important way — with a while loop, the condition to be evaluated is tested at the beginning of each loop iteration, so if the conditional expression evaluates to false, the loop will never be executed.

With a do-while loop, on the other hand, the loop will always be executed once even if the conditional expression evaluates to false, because unlike the while loop, the condition is evaluated at the end of the loop iteration rather than the beginning.

The for Loop
The for loop repeats a block of code as long as a certain condition is met. It is typically used to execute a block of code for certain number of times. Its syntax is:

for(initialization; condition; increment) {
    // Code to be executed
}
The parameters of the for loop statement have following meanings:

initialization — it is used to initialize the counter variables, and evaluated once unconditionally before the first execution of the body of the loop.
condition — it is evaluated at the beginning of each iteration. If it evaluates to true, the loop statements execute. If it evaluates to false, the execution of the loop ends.
increment — it updates the loop counter with a new value each time the loop runs.
The following example defines a loop that starts with i=1. The loop will continued until the value of variable i is less than or equal to 5. The variable i will increase by 1 each time the loop runs:

ExampleTry this code »
for(var i=1; i<=5; i++) {
    document.write("<p>The number is " + i + "</p>");
}
The for loop is particularly useful for iterating over an array. The following example will show you how to print each item or element of the JavaScript array.

ExampleTry this code »
// An array with some elements
var fruits = ["Apple", "Banana", "Mango", "Orange", "Papaya"];
 
// Loop through all the elements in the array 
for(var i=0; i<fruits.length; i++) {
    document.write("<p>" + fruits[i] + "</p>");
}
The for...in Loop
The for-in loop is a special type of a loop that iterates over the properties of an object, or the elements of an array. The generic syntax of the for-in loop is:

for(variable in object) {
    // Code to be executed
}
The loop counter i.e. variable in the for-in loop is a string, not a number. It contains the name of current property or the index of the current array element.

The following example will show you how to loop through all properties of a JavaScript object.

ExampleTry this code »
// An object with some properties 
var person = {"name": "Clark", "surname": "Kent", "age": "36"};
 
// Loop through all the properties in the object  
for(var prop in person) {  
    document.write("<p>" + prop + " = " + person[prop] + "</p>"); 
}
Similarly, you can loop through the elements of an array, like this:

ExampleTry this code »
// An array with some elements
var fruits = ["Apple", "Banana", "Mango", "Orange", "Papaya"];
 
// Loop through all the elements in the array 
for(var i in fruits) {  
    document.write("<p>" + fruits[i] + "</p>");
}
Note: The for-in loop should not be used to iterate over an array where the index order is important. You should better use a for loop with a numeric index.

The for...of Loop ES6
ES6 introduces a new for-of loop which allows us to iterate over arrays or other iterable objects (e.g. strings) very easily. Also, the code inside the loop is executed for each element of the iterable object.

The following example will show you how to loop through arrays and strings using this loop.

ExampleTry this code »
// Iterating over array
let letters = ["a", "b", "c", "d", "e", "f"];

for(let letter of letters) {
    console.log(letter); // a,b,c,d,e,f
}

// Iterating over string
let greet = "Hello World!";

for(let character of greet) {
    console.log(character); // H,e,l,l,o, ,W,o,r,l,d,!
}








(12) How can you convert the string of any base to an integer in JavaScript?
ans:- Users can use functions in JavaScript to convert a string into an integer. There are many ways to convert a string into an integer value. One is by using JavaScript functions like Number(), parseFloat(), parseInt().

The other techniques like unary plus operator, bitwise NOT operator, etc., can also convert string input into an integer value. This article will discuss how users can convert a JavaScript string into an integer value.

What is parseInt() in JavaScript?
In JavaScript, users use the parseInt() to give input as strings and radix parameters and convert that input into an integer. parseInt() is a function that converts the string input into an integer value. After users run their code, the parseInt() function returns an integer of a base which the second parameter specifies in the parseInt() function.

Users can use the radix parameter to define which numeral system they will use in their code.

If users do not add any numeric value to the string input, it returns NaN, i.e., not a number. Users can use the radix parameter to specify which numeral system they will use in their code. An example to illustrate the function of the radix parameter - a radix parameter of sixteen signifies that the interpreter should parse the number in the string from a hexadecimal number to a decimal number.

Syntax:

parseInt(Value, radix)
This function takes two parameters. These are:

Value:

This parameter includes a string input, which the user will convert into an integer value.

Radix:

This parameter signifies the base or radix the user will input as a parameter, but it is optional.

1. Convert a string into an integer using the parseInt():
Code Snippet:


<html>
<body>
<script>
	var A = "1";
	var B = parseInt(A);
	document.write(" The value is " + B);
	var C = parseInt("111-0-111");
	document.write("</br>");
	document.write(" The value is " + C);
	document.write("</br>");
	var D = "Hello";
	var E = parseInt("20 Hello");
	document.write("value is " + E);
	document.write("</br>");
	var F = parseInt(D);
	document.write(" The value is " + F);
</script>
</body>
</html>
Explanation:

In this code snippet, we have used the parseInt() function to convert the string written within double quotes. The last variable, i.e., var F, signifies that we have not used any integer within the double-quotes. So, it returns a NaN (not a number). The second last variable (var E) returns only the integer part of the string, i.e., 20.

Output:



Run Code

What is Number() in JavaScript?
Users can use this function to convert a value of other types to numbers using the Number() function. It implies it can depict fractional values, but there are a few limitations to what it can store.

Syntax:

Number(object)
This function has a single parameter.

Object:

This parameter holds the objects of any data type the users want to convert into a number type.

2. Using Number():
Code Snippet:

    const demo1 = "12"; 
	document.write('Variable is: ' + typeof demo1);
	Number(demo1) 
	document.write('<br>After converting to integer: ' + Number(demo1));
	const demo2 = "Hello" 
	console.log(Number(demo2));
	document.write('<br>After converting to integer: ' + Number(demo2));
Explanation:

In this code snippet, first, we have used a string called "demo" with an integer value. It returns the type of input as a string. Secondly, we have used the Number() function that converts the input string into an integer, i.e., it returns 10 in the console.

But when we used the string input "Hello" in the last variable (demo2), the output is "NaN," which represents it has no number input. It is because we have not used any numeral value inside the string input or the string's first character has no number.

Output:



Run Code

What is parseFloat() in JavaScript?
Similar to the above JavaScript functions, the parseFloat() is a function that accepts a string input and converts it into a floating-point number. If the string input does not have a numeral value or the string's first character is not a numeral value, it returns NaN, i.e., not a number.

Syntax:

parseFloat(value)
This function has a single parameter.

Value:

This parameter accepts a string. It converts the string input into an integer or a floating-point number (based on the string data type).

3. Using parseFloat():
Code Snippet:

<script>
	const demo1 = "12";
	console.log(parseFloat(demo1));
	document.write('<br>After converting "12" to integer: ' + parseFloat(demo1));
	const demo2 = "12Hello";
	console.log(parseFloat(demo2));
	document.write('<br>After converting "12Hello" to integer: ' + parseFloat(demo2));
	const demo3 = "F12";
	console.log(parseFloat(demo3));
	document.write('<br>After converting "F12" to integer: ' + parseFloat(demo3));
</script>
Explanation:

In the above code snippet, we have used three variables with three different scenarios. The first variable (demo1) contains a string input with a value of 12 and returns 12 as output. In the second, we used a string input having a number as the first character and returning the same numeral value input.

But when we used a non-numeral value in the last variable (demo3), the console displayed the output as NaN.

Output:



Run Code

4. Using the unary plus operator (+) –
<script>
	const demo1 = "12";
	console.log(+demo1);
	document.write('<br>After converting "12" to integer: ' + +demo1);
	const demo2 = "awesome";
	console.log(+demo2);
	document.write('<br>After converting "awesome" to integer: ' + +demo2);
</script>
Explanation:

The unary plus operator converts the string input into an integer. Users need to place the operator before the operand.

Output:



Run Code


5. By multiplying the string by the number 1:
<script>	
	const demo1 = "10";
	document.write('<br>After converting "12" to integer: ' + demo1 * 1);
	console.log(demo1 * 1);
	const demo2 = "Hello";
	document.write('<br>After converting "12" to integer: ' + demo2 * 1);
	console.log(demo2 * 1);
</script>
Explanation:

Here, we are multiplying a string input with a number. The interpreter will convert the string value into a number and perform that mathematical operation. If the JavaScript interpreter cannot convert the string into a number, then the mathematical operation will not work and will return NaN.

Output:



Run Code

6. By divide the string by the number 1:
<script>	
	const demo1 = "10";
	document.write('<br>After converting "12" to integer: ' + demo1 / 1);
	const demo2 = "Hello";
	document.write('<br>After converting "12" to integer: ' + demo2 / 1);
</script>
Explanation:

Here, we are dividing a string input with a number. The interpreter will convert the string value into a number and perform that division operation. If the JavaScript interpreter cannot convert the string into a number, then the mathematical operation will not work and will return NaN.

Output:



Run Code

7. By subtracting the number 0 from the string:
<script>	
	const demo1 = "10";
	document.write(demo1 - 0);
</script>
Explanation:

In the above method, we subtract the string input from 0 and get the required output.

Output:



Run Code

8. Using the bitwise NOT operator (~):
<script>	
	const demo1 = "16";
	document.write('<br>After converting "16" to integer: ' + ~~demo1);
	const demo2 = "awesome";
	document.write('<br>After converting "awesome" to integer: ' + ~~demo2);
</script>
Explanation:


Here, we are using a bitwise NOT operator (~). This operator will invert the operand's bits and convert that value to a 32-bit signed integer. If we apply one bitwise NOT operator (~) on the input number, it will execute the -(x + 1) operation. And, when we use two bitwise NOT operators (~), it will convert the string input into a number.











(13) What is the function of the delete operator?
ans:-The delete operator in JavaScript is used to delete an object’s property.

If it is used to delete an object property that already exists, it returns true and removes the property from the object. However, deleting an object property that doesn’t exist will not affect the object, but will still return true.
property.












(14)  What are all the types of Pop up boxes available in JavaScript?
ans:- JavaScript has three kind of popup boxes: Alert box, Confirm box, and Prompt box.

Alert Box
An alert box is often used if you want to make sure information comes through to the user.

When an alert box pops up, the user will have to click "OK" to proceed.

Syntax
window.alert("sometext");
The window.alert() method can be written without the window prefix.

Example
alert("I am an alert box!");
Confirm Box
A confirm box is often used if you want the user to verify or accept something.

When a confirm box pops up, the user will have to click either "OK" or "Cancel" to proceed.

If the user clicks "OK", the box returns true. If the user clicks "Cancel", the box returns false.

Syntax
window.confirm("sometext");
The window.confirm() method can be written without the window prefix.

Example
var r = confirm("Press a button");
if (r == true) {
    x = "You pressed OK!";
} else {
    x = "You pressed Cancel!";
}
Prompt Box
A prompt box is often used if you want the user to input a value before entering a page.

When a prompt box pops up, the user will have to click either "OK" or "Cancel" to proceed after entering an input value.

If the user clicks "OK" the box returns the input value. If the user clicks "Cancel" the box returns null.

Syntax
window.prompt("sometext","defaultText");
The window.prompt() method can be written without the window prefix.

Example
var person = prompt("Please enter your name", "Harry Potter");
if (person != null) {
    document.getElementById("demo").innerHTML =
    "Hello " + person + "! How are you today?";
}
Line Breaks
To display line breaks inside a popup box, use a back-slash followed by the character n.

Example
alert("Hello\nHow are you?");









(15)  What is the use of Void (0)? 
ans:- The void operator evaluates the given expression and then returns undefined. If we pass 
0
0
 as the unary expression operand to the void operator, JavaScript coerces 
0
0
 to false and returns it undefined (which means “do nothing”).

This method of “doing nothing” becomes useful when we want to insert hyperlinks that perform useful functions on the page. Such hyperlinks allow a user to click on one and then perform a useful function, like updating a value on the webpage without loading a new page.






(16)  How can a page be forced to load another page in JavaScript? 
ans:- In JavaScript, we can use window.location object to force a page to load another page. We can use the location object to set the URL of a new page. There are different ways – window.location.href property, window.location.assign() and window.location.replace() methods, to set the URL of a new page using the location object. We will discuss each of the property and methods in detail in this tutorial.

Window.location.replace
The first way is to use the window.location.href property. This property contains information about the current URL of the page, and it can be used to redirect the user to a new page.

Syntax
window.location.href = "new_url";
The user will be immediately redirected to the specified URL (new_url).

To redirect the user after a specified amount of time has passed, we may also specify the setTimout function which allows the user to redirect to the source URL after the time specified in the function.

setTimeout(function() {
   window.location.href = "https://www.tutorialspoint.com";
}, 3000);
The above example will redirect the user to the given URL (https://www.tutorialspoint.com) after 3 seconds have passed.

Example
In this example, we have defined a button (Load) that when clicked renders a function forceLoad(). In the forceLoad() fucntion we use window.location.href property to reload new page- tutorialspoint home page.

<html>
<body>
   <h2>Forced Load page using window.location.href property</h2>
   <p>Click on the below button to force reload new page</p>
   <button onclick="forceLoad()">Load</button>
   <script>
      function forceLoad() {
         window.location.href = "https://www.tutorialspoint.com";
      }
   </script>
</body>
</html>
window.location.replace
Another way for redirecting forcefully to another page is to use the window.location.replace property. This method helps in replacing the current page in the browser's history with another page, but here the user will not be able to return back to the original page.

Syntax
window.location.replace("new_url");
In this syntax, we will have the same effect as the window.location.href example, but here the difference is that the current page of the user will not be stored in the browser's history.

Example
In this example, we have defined a button (Load) that when clicked renders a function forceLoad(). The forceLoad() function renders a JavaScript method- location.replace() that replaces the current source with the one at the provided URL in the function.

Note that, once the navigation occurs, it does not allow the users to navigate back to the previous page which is possible in the case of location.assign() property in javascript.

<html>
<body>
   <h2>Forced Load page using window.location.replace() method</h2>
   <p>Click below button force reload new page</p>
   <button onclick="forceLoad()">Load</button>
   <script>
      function forceLoad() {
         window.location.replace("https://www.tutorialspoint.com");
      }
   </script>
</body>
</html>
window.location.assign
In this method, we use the window.location.assign method which is used to add a new page to the browser's history allowing the users to return back to the original page browsed by the user.

Syntax
window.location.assign("new_url");
In this syntax, it will have the same effect as the window.location example, but here the difference is that the current page of the user will be stored in the browser's history.

Example
In this example, we have defined a button (Load) that when clicked renders a function forceLoad(). The forceLoad() function renders a JavaScript method- location.assign() that causes the window to load and display the document or page at the current URL specified. Once the navigation occurs, it also allows the users to navigate back to the previous page with the help of a property called Location.assign(), just by pressing the "back" button of the browser.

<html>
<body>
   <h2>Window.location.assign() method</h2>
   <button onclick="forceLoad()">Load</button>
   <script>
      function forceLoad() {
         location.assign("https://www.tutorialspoint.com");
      }
   </script>
</body>
</html>
Difference between window.location, window.location.replace, and window.location.assign
Basis	window.location.href	window.location.assign	window.location.replace
Definition	It gets the current URL and redirects to a new document or page specified at the URL.	It loads and displays the document or page specified at the URL.	It replaces the current page with the one specified in the URL.
Browser History	It does not add the newly loaded document or page to the browser history.	It saves the newly loaded document or page in the browser history.	It also saves the newly loaded document or page in the browser history.
Go back	It allows the user to return to the previous page/document.	It also allows the user to return to the previous page.	It does not allow the user to return to the previous page.
The main difference between window.location.href property, window.location.replace(), and window.location.assign() methods are how they handle the browser's history. If we talk about location.replace method, it will replace the current URL and does not allow the user to return to the previous page. The location.assign method will load a new document and also adds it to the browser's history, simultaneously allowing the user to return to the previous open page. Lastly, the window.location method is the same as the location.assign as it also adds the new document to the browser's history.

Conclusion
Concluding the article, loading a new page forcefully to another page in JavaScript is an easy task that can be accomplished using multiple JavaScript methods i.e, window.location.href property, the window.location.replace() method or the window.location.assign() method. All of these methods help the developers with the ability to create dynamic and interactive web pages that help in creating better user interactions & enhance the user application experience.







(17)  What are the disadvantages of using innerHTML in JavaScript?
ans:-  Text extremely  page Dynamically manipulating the DOM is a fundamental aspect of web development in creating interactive and functional web applications. The innerHTML property is commonly used to modify the DOM, but it has some drawbacks. This article will examine the downsides of using innerHTML and provide some alternative approaches that can avoid these potential problems.

The innerHTML Property
JavaScript has a property called innerHTML that lets you change an HTML element's content. This is used to set the content of HTML elements in a web page, including nested HTML elements. The value of innerHTML, when set, replaces the existing HTML content of that element. Although it is a useful approach to dynamically add or edit HTML information, there are some potential downsides that should be taken into account. 

Reasons to Avoid Using the innerHTML Property
1. Cross-Site Scripting (XSS) Threats
This is one of the key issues with using innerHTML. An XSS attack using innerHTML works by injecting malicious code into your website, which it then uses to carry out an attack. This is possible because innerHTML renders a complete markup and not just text. This might then provide an attacker the opportunity to steal confidential user information or conduct other illicit activities on the site. 


Never use innerHTML to display user-entered content or content that you don't write yourself!
2. It Can Be a Slower Method of Dynamically Updating HTML Content
innerHTML requires the browser to parse and render the element's whole HTML content, and this might take a while for larger elements or those elements that are updated regularly.

3. Accessibility
When updating information with innerHTML, people who use screen readers or other assistive technologies may experience accessibility problems. This is because changes made to the page using innerHTML may go undetected by screen readers.

4. Inner HTML Is Vulnerable to Errors
Unexpected behavior may occur, for instance, if the content being entered contains HTML that contradicts the page's existing markup. When integrating with third-party libraries or plugins or dealing with complex layouts, this can be particularly challenging.

Alternatives to Using the innerHTML Method
There are some alternative methods that can be used to dynamically update HTML contents instead of using the innerHTML method.

1. createElement()
This method allows you to create new HTML elements. It can be used to add new content to a web page or to modify existing content depending on events or the user's interaction with the element. To create a new element using the createElement method, you need to select the parent element that you want to add a new element to. Then use another method like the appendChild() method to add the new element to the DOM. 

const newParagraph = document.createElement('p');
const parentElement = document.getElementById('firstDiv');
parentElement.appendChild(newParagraph);
In the first line of code above, a new <p> element is created. This new element, although created, hasn't been added to the web page. The second line of code is where the parent element with a div name of firstDiv is selected as the element to which a new element will be added. The third line of code is where the appendChild method is used to add the newly created element to the parent element.

2. textContent()
This property allows you to set the text content of an HTML element. Here, only the text content is updated or modified, and not the entire HTML element. To use this method, you need to select the element you want to set the text content. You then set its text content using the textContent property.

const paragraphElement = document.getElementById('textOne');
paragraphElement.textContent = 'Adding a new text!';
In the first line of code, we are selecting an element with the id of textOne. Then, in the second line of code, we are using the textContent property to set its text content to some new text.

This method is a simpler way of updating the text content of an element when compared to using the innerHTML method. It is also less vulnerable to XXS attacks because it does not allow HTML to be injected into any element.

Using the innerText Property
The innerText property lets you access or modify an element's text content without the need for HTML tags. The value of innerText, when set, replaces the existing text content of that element.

Accessing and Modifying HTML Elements With innerText
Below is an example of how HTML elements can be accessed and modified using the innerText property:

const paragraphElement = document.getElementById('my-id');
paragraphElement.innerText = "Hello everyone!";
In the above example, we are getting the innerText of an element that has an ID of my-id and setting the text to "Hello everyone".


Advertisement
Comparing the innerText Property and the textContent Property
Although the textContent and innerText properties can both be used to set or access an element's text content, they handle styles and layouts differently. innerText only sets or gets the visible text content of an element, excluding any hidden or styled elements, while textContent sets or gets the text content of an element, including any whitespace or HTML tags.

In this example, you'll see how the innerText and textContent properties differ when dealing with CSS styles and layouts.

Click the Get innerText and Get textContent buttons to see the difference.



Notice in this example how the textContent property takes into consideration the CSS styles and layout of the main <p> element and maintains the styling. It returns the extra spacing and the span element. On the other hand, the innerText property doesn't take that into consideration and returns only the text content of the element.

Conclusion
To sum it all up, the createElement method, textContent property, and innerText property are powerful JavaScript features for dynamically manipulating web-page content. The textContent and innerText properties can be used to set or get an element's text content, while the createElement method allows developers to create new HTML elements and add them to the DOM.

JavaScript has a property called innerHTML that lets you change an HTML element's content. This is used to set the content of HTML elements in a web page, including nested HTML elements. The value of innerHTML, when set, replaces the existing HTML content of that element. Although it is a useful approach to dynamically add or edit HTML information, there are some potential downsides that should be taken into account. 



Understanding how to use these methods and properties will enhance a developer's ability to use JavaScript to create dynamic and interactive web pages.

 


